window.c20g.ws.recruiting = {

	GetCandidates : function(callback) {
		var paramNS = "http://c20g.com/apps/bpm/at_recruiting";
		var soapBody = window.c20g.Soap.constructSimpleSOAPBody(
			"GetAllCandidates",
			"http://c20g.com/apps/bpm/at_recruiting",
			[],
			paramNS
		);
		var sr = new SOAPRequest("GetAllCandidates", soapBody);
		SOAPClient.Proxy = window.c20g.config.url.getGatewayUrl();
		SOAPClient.SendRequest(sr, function(response) {
			var candidates = [];
			var candidateTuples = response.Body[0].GetAllCandidatesResponse[0].tuple;
			if(!_.isUndefined(candidateTuples)) {
				for(var i = 0; i < candidateTuples.length; i++) {
					var candidate = {};
					candidate.id = candidateTuples[i].old[0].at_recruiting[0].id[0].Text;
					candidate.submission_date = moment(candidateTuples[i].old[0].at_recruiting[0].submission_date[0].Text, "YYYY-MM-DD").format("MM/DD/YYYY");
					candidate.hr_viewed = candidateTuples[i].old[0].at_recruiting[0].hr_viewed[0].Text;
					candidate.position_id = candidateTuples[i].old[0].at_recruiting[0].position_id[0].Text;
					candidate.position = candidateTuples[i].old[0].at_recruiting[0].at_lu_position[0].position_name[0].Text; 
					candidate.status = candidateTuples[i].old[0].at_recruiting[0].at_lu_candidate_status[0].status_name[0].Text;
					candidate.status_id = candidateTuples[i].old[0].at_recruiting[0].status[0].Text;
					candidate.first_name = candidateTuples[i].old[0].at_recruiting[0].first_name[0].Text;
					candidate.last_name = candidateTuples[i].old[0].at_recruiting[0].last_name[0].Text;
					candidate.full_name = candidate.first_name + " " + candidate.last_name;
					if(candidateTuples[i].old[0].at_recruiting[0].start_date[0].Text){
						candidate.start_date = moment(candidateTuples[i].old[0].at_recruiting[0].start_date[0].Text, "YYYY-MM-DD").format("MM/DD/YYYY");
					} else {
						candidate.start_date = "not specified";
					};
					candidates.push(candidate);
				}
			}
			callback && callback(candidates);
		});
	},

	GetCandidateById : function(candidateId, callback) {
		var paramNS = "http://c20g.com/apps/bpm/at_recruiting";
		var soapParams = {
			'id' : candidateId
		};
		var methodName = 'GetCandidateById';
		var soapBody = window.c20g.Soap.jsonToSoap(soapParams, methodName);
		soapBody.attr("xmlns", paramNS);

		var sr = new SOAPRequest("GetCandidateById", soapBody);
		SOAPClient.Proxy = window.c20g.config.url.getGatewayUrl();
		SOAPClient.SendRequest(sr, function(response) {

			var candidate = {};
			var candidateTuple = response.Body[0].GetCandidateByIdResponse[0].Response[0].tuple[0].old[0].at_recruiting[0];
				candidate.id = candidateTuple.id[0].Text;
				candidate.submission_date = candidateTuple.submission_date[0].Text;
				candidate.status = candidateTuple.status[0].Text;
				candidate.status_type = candidateTuple.at_lu_candidate_status[0].status_name[0].Text;
				candidate.position = candidateTuple.position_id[0].Text;
				candidate.position_type = candidateTuple.at_lu_position[0].position_name[0].Text;
				candidate.first_name = candidateTuple.first_name[0].Text;
				candidate.last_name = candidateTuple.last_name[0].Text;
				candidate.full_name = candidate.first_name + " " + candidate.last_name;
				candidate.email = candidateTuple.email[0].Text;
				candidate.phone_number = candidateTuple.phone_number[0].Text;
				candidate.street_address = candidateTuple.street_address[0].Text;
				candidate.city = candidateTuple.city[0].Text;
				candidate.state = candidateTuple.state[0].Text;
				candidate.zipcode = candidateTuple.zipcode[0].Text;
				candidate.college_name = candidateTuple.college_name[0].Text;
				candidate.college_city = candidateTuple.college_city[0].Text;
				candidate.college_state = candidateTuple.college_state[0].Text;
				candidate.major1 = candidateTuple.major1[0].Text;
				candidate.major2 = candidateTuple.major2[0].Text;
				candidate.minor1 = candidateTuple.minor1[0].Text;
				candidate.minor2 = candidateTuple.minor2[0].Text;
				candidate.gpa_overall = candidateTuple.gpa_overall[0].Text;
				candidate.gpa_major = candidateTuple.gpa_major[0].Text;
				candidate.awards = candidateTuple.awards[0].Text;
				candidate.grad_date = candidateTuple.grad_date[0].Text;
				candidate.work_auth = candidateTuple.work_auth[0].Text;
				candidate.source = candidateTuple.source[0].Text;
				candidate.referral = candidateTuple.referral[0].Text;
				candidate.referrer = candidateTuple.referrer[0].Text;
				candidate.accommodation = candidateTuple.accommodation[0].Text;
				candidate.law = candidateTuple.law[0].Text;
				candidate.start_date = candidateTuple.start_date[0].Text;
				candidate.other_langs = candidateTuple.other_langs[0].Text;
				candidate.skills = [];

				if(response.Body[0].GetCandidateByIdResponse[0].Response[0].tuple[1]){
					var skillTuple = response.Body[0].GetCandidateByIdResponse[0].Response[0].tuple;
					for (var i = 1; i < skillTuple.length; i++) {
						var skillset = []
						skillset.push(skillTuple[i].old[0].at_candidate_skills[0].skill_id[0].Text);
						skillset.push(skillTuple[i].old[0].at_candidate_skills[0].level_id[0].Text);
						candidate.skills.push(skillset);
					}
				}

			callback && callback(candidate)
		});
	},

	CreateCandidateApplication : function(candidate, callback) {
		var paramNS = "http://c20g.com/apps/bpm/at_recruiting";
		var soapParams = {
			'Update' : {
				'tuple' : [
				{
					'new' : {
						'at_recruiting' : candidate
					}
				}
				]
			}
		};
		var methodName = 'UpdatedCandidateApplication';
		var soapBody = window.c20g.Soap.jsonToSoap(soapParams, methodName);
		soapBody.attr("xmlns", paramNS);

		var sr = new SOAPRequest("UpdatedCandidateApplication", soapBody);
		SOAPClient.Proxy = window.c20g.config.url.getGatewayUrl();
		SOAPClient.SendRequest(sr, function(response) {
			callback && callback();
		});
	},

	UpdateCandidateApplication: function(candidateId, candidate, callback){
		var paramNS = "http://c20g.com/apps/bpm/at_recruiting";
		var soapParams = {
			'Update' : {
				'tuple' : [
				{
					'old' : {
						'at_recruiting': {
							'id': candidateId,
						}
					},
					'new' : {
						'at_recruiting' : candidate
					}
				}
				]
			}
		};
		var methodName = 'UpdatedCandidateApplication';
		var soapBody = window.c20g.Soap.jsonToSoap(soapParams, methodName);
		soapBody.attr("xmlns", paramNS);

		var sr = new SOAPRequest("UpdatedCandidateApplication", soapBody);
		SOAPClient.Proxy = window.c20g.config.url.getGatewayUrl();
		SOAPClient.SendRequest(sr, function(response) {
			callback && callback();
		});
	},

	GetLookUpData : function(callback) {
		var paramNS = "http://c20g.com/apps/bpm/at_recruiting";
		var soapBody = window.c20g.Soap.constructSimpleSOAPBody(
			"GetAllLookUpTables",
			"http://c20g.com/apps/bpm/at_recruiting",
			[],
			paramNS
		);
		var sr = new SOAPRequest("GetAllLookUpTables", soapBody);
		SOAPClient.Proxy = window.c20g.config.url.getGatewayUrl();
		SOAPClient.SendRequest(sr, function(response) {

			var getAllTuple = response.Body[0].GetAllLookUpTablesResponse[0];

			var allStatuses = [];
			var statusTuples = getAllTuple.allStatuses[0].GetAllStatusesResponse[0].tuple;
			if(!_.isUndefined(statusTuples)) {
				for(var i = 0; i < statusTuples.length; i++) {
					var status = {};
					status.id = statusTuples[i].old[0].at_lu_candidate_status[0].status_id[0].Text;
					status.description = statusTuples[i].old[0].at_lu_candidate_status[0].status_name[0].Text;
					allStatuses.push(status);
				}
			};

			var allPositions = [];
			var positionTuples = getAllTuple.allPositions[0].GetAllPositionsResponse[0].tuple;
			if(!_.isUndefined(positionTuples)) {
				for(var i = 0; i < positionTuples.length; i++) {
					var position = {};
					position.id = positionTuples[i].old[0].at_lu_position[0].position_id[0].Text;
					position.description = positionTuples[i].old[0].at_lu_position[0].position_name[0].Text;
					allPositions.push(position);
				}
			};

			var allSkillLevels = [];
			var skillLevelTuples = getAllTuple.allSkillLevels[0].GetAllSkillLevelsResponse[0].tuple;
			if(!_.isUndefined(skillLevelTuples)) {
				for(var i = 0; i < skillLevelTuples.length; i++) {
					var skillLevel = {};
					skillLevel.id = skillLevelTuples[i].old[0].at_lu_skill_level[0].level_id[0].Text;
					skillLevel.description = skillLevelTuples[i].old[0].at_lu_skill_level[0].level_name[0].Text;
					allSkillLevels.push(skillLevel);
				}
			};

			var allSkillTypes = [];
			var skillTypeTuples = getAllTuple.allSkillTypes[0].GetAllSkillTypesResponse[0].tuple;
			if(!_.isUndefined(skillTypeTuples)) {
				for(var i = 0; i < skillTypeTuples.length; i++) {
					var skillType = {};
					skillType.id = skillTypeTuples[i].old[0].at_lu_skill_type[0].skill_id[0].Text;
					skillType.description = skillTypeTuples[i].old[0].at_lu_skill_type[0].skill_name[0].Text;
					allSkillTypes.push(skillType);
			}};

			callback && callback({
				allStatuses : allStatuses, 
				allPositions : allPositions, 
				allSkillTypes : allSkillTypes, 
				allSkillLevels: allSkillLevels
			});
		});
	},

};
