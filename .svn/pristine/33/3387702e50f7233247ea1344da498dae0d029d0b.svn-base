var	CreateCandidateApplication = function(candidate, callback) {
	var paramNS = "http://c20g.com/apps/bpm/at_recruiting";
	var soapParams = {
		'position_id' : candidate.position_id,

		'first_name' : candidate.first_name,
		'last_name' : candidate.last_name,
		'email' : candidate.email,
		'phone_number' : candidate.phone_number,
		'street_address' : candidate.street_address,
		'city' : candidate.city,
		'state' : candidate.state,
		'zipcode' : candidate.zipcode,

		'university_id' : candidate.university_id,
		'primary_study_id' : candidate.primary_study_id,
		'secondary_study_id' : candidate.secondary_study_id,
		'gpa' : candidate.gpa,
		'awards' : candidate.awards,
		'grad_date' : candidate.grad_date,
		'other_ed_id' : candidate.other_ed_id,
		'other_ed_summary' : candidate.other_ed_summary,

		'work_auth_id' : candidate.work_auth_id,

		'sources' : candidate.sources,

		'referrer' : candidate.referrer,
		'start_date' : candidate.start_date,
		'misc_summary' : candidate.misc_summary,
		'resume_url' : candidate.resume_url,
		'cover_letter_url' : candidate.cover_letter_url,
		'github_url' : candidate.github_url,
		'personal_url' : candidate.personal_url,
		'linkedin_url' : candidate.linkedin_url,
		'twitter' : candidate.twitter,
		'desired_salary' : candidate.desired_salary
	};

	var methodName = 'CreateCandidate';
	var soapBody = window.c20g.Soap.jsonToSoap(soapParams, methodName);
	soapBody.attr("xmlns", paramNS);

	var sr = new SOAPRequest("CreateCandidate", soapBody);
	SOAPClient.Proxy = window.c20g.config.url.getGatewayUrl();
	SOAPClient.SendRequest(sr, function(response) {
		callback && callback();
	});
}; 

var	GetLookUpData = function(callback) {
	var paramNS = "http://c20g.com/apps/bpm/at_recruiting";
	var soapBody = window.c20g.Soap.constructSimpleSOAPBody(
		"GetAllLookUpTables",
		"http://c20g.com/apps/bpm/at_recruiting",
		[],
		paramNS
	);
	var sr = new SOAPRequest("GetAllLookUpTables", soapBody);
	SOAPClient.Proxy = window.c20g.config.url.getGatewayUrl();
	SOAPClient.SendRequest(sr, function(response) {

		var getAllTuple = response.Body[0].GetAllLookUpTablesResponse[0];

		var allStates = [];
		var statesTuples = getAllTuple.allStates[0].GetAllStateResponse[0].tuple;
		if(!_.isUndefined(statesTuples)) {
			for(var i = 0; i < statesTuples.length; i++) {
				var state = {};
				state.id = statesTuples[i].old[0].at_lu_states[0].id[0].Text;
				state.description = statesTuples[i].old[0].at_lu_states[0].state_name[0].Text;
				allStates.push(state);
			}
		};

		var allFieldsOfStudy = []
		var fieldsOfStudyTuples = getAllTuple.allFieldsOfStudy[0].GetAllFieldsOfStudyResponse[0].tuple;
		if(!_.isUndefined(fieldsOfStudyTuples)) {
			for(var i = 0; i < fieldsOfStudyTuples.length; i++) {
				var fieldOfStudy = {};
				fieldOfStudy.id = fieldsOfStudyTuples[i].old[0].at_lu_field_of_study[0].id[0].Text;
				fieldOfStudy.description = fieldsOfStudyTuples[i].old[0].at_lu_field_of_study[0].description[0].Text;
				allFieldsOfStudy.push(fieldOfStudy);
			}
		};

		var allOtherEds = []
		var otherEdTuples = getAllTuple.allOtherEds[0].GetAllOtherEdsResponse[0].tuple;
		if(!_.isUndefined(otherEdTuples)) {
			for(var i = 0; i < otherEdTuples.length; i++) {
				var otherEd = {};
				otherEd.id = otherEdTuples[i].old[0].at_lu_other_ed[0].id[0].Text;
				otherEd.description = otherEdTuples[i].old[0].at_lu_other_ed[0].description[0].Text;
				allOtherEds.push(otherEd);
			}
		};

		var allWorkAuths = []
		var workAuthTuples = getAllTuple.allWorkAuths[0].GetAllWorkAuthsResponse[0].tuple;
		if(!_.isUndefined(workAuthTuples)) {
			for(var i = 0; i < workAuthTuples.length; i++) {
				var workAuth = {};
				workAuth.id = workAuthTuples[i].old[0].at_lu_work_auth[0].id[0].Text;
				workAuth.description = workAuthTuples[i].old[0].at_lu_work_auth[0].description[0].Text;
				allWorkAuths.push(workAuth);
			}
		};

		var allSources = []
		var sourceTuples = getAllTuple.allSources[0].GetAllSourcesResponse[0].tuple;
		if(!_.isUndefined(sourceTuples)) {
			for(var i = 0; i < sourceTuples.length; i++) {
				var source = {};
				source.id = sourceTuples[i].old[0].at_lu_source[0].id[0].Text;
				source.description = sourceTuples[i].old[0].at_lu_source[0].description[0].Text;
				source.career_fair = sourceTuples[i].old[0].at_lu_source[0].career_fair[0].Text;
				allSources.push(source);
			}
		};
			
		callback && callback({
			allStates: allStates, 
			allFieldsOfStudy : allFieldsOfStudy,
			allOtherEds : allOtherEds,
			allWorkAuths : allWorkAuths,
			allSources : allSources
		});
	});
};

var	GetUniversities = function(stateId, callback) {
	var paramNS = "http://c20g.com/apps/bpm/at_recruiting";
	var soapParams = {
		'state_id' : stateId
	};
	var methodName = 'GetUniversitiesByStateId';
	var soapBody = window.c20g.Soap.jsonToSoap(soapParams, methodName);
	soapBody.attr("xmlns", paramNS);

	var sr = new SOAPRequest("GetUniversitiesByStateId", soapBody);
	SOAPClient.Proxy = window.c20g.config.url.getGatewayUrl();
	SOAPClient.SendRequest(sr, function(response) {
		var allUniversities = [];
		var universitiesTuples = response.Body[0].GetUniversitiesByStateIdResponse[0].tuple;
		if(!_.isUndefined(universitiesTuples)) {
			for(var i = 0; i < universitiesTuples.length; i++) {
				var university = {};
				university.id = universitiesTuples[i].old[0].at_lu_universities[0].id[0].Text;
				university.description = universitiesTuples[i].old[0].at_lu_universities[0].university_name[0].Text;
				allUniversities.push(university);
			}
		};
		callback && callback({
			allUniversities:allUniversities
		});
	});
};
